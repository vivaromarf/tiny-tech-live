{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport function getPathWithRadius(width, height, borderRadius) {\n  if (borderRadius) {\n    var APrefix = \"A \" + borderRadius + \", \" + borderRadius + \", 0 0 1\";\n    var ATopLeft = APrefix + \" \" + borderRadius + \",0\";\n    var ATopRight = APrefix + \" \" + width + \",\" + borderRadius;\n    var ABottomRight = APrefix + \" \" + (width - borderRadius) + \",\" + height;\n    var ABottomLeft = APrefix + \" 0,\" + (height - borderRadius);\n    return \"M 0,\" + borderRadius + \" \" + ATopLeft + \" H \" + (width - borderRadius) + \" \" + ATopRight + \" V \" + (height - borderRadius) + \" \" + ABottomRight + \" H \" + borderRadius + \" \" + ABottomLeft + \" Z\";\n  } else {\n    return \"M 0,0 H \" + width + \" V \" + height + \" H 0 Z\";\n  }\n}\nexport function transformShadowPropsForAndroid(props) {\n  var shadowProps = _objectSpread({}, props);\n\n  if (Platform.OS === 'android') {\n    shadowProps.shadowRadius = props.shadowRadius * 2;\n    shadowProps.shadowOffset.x = props.shadowOffset.x * 3;\n    shadowProps.shadowOffset.y = props.shadowOffset.y * 3;\n  }\n\n  return shadowProps;\n}\nexport function transformStyleProps(styleProps, neomorph) {\n  var _ref = styleProps instanceof Array ? StyleSheet.flatten(styleProps) : styleProps,\n      width = _ref.width,\n      height = _ref.height,\n      _ref$borderRadius = _ref.borderRadius,\n      borderRadius = _ref$borderRadius === void 0 ? 0 : _ref$borderRadius,\n      backgroundColor = _ref.backgroundColor,\n      _ref$shadowOpacity = _ref.shadowOpacity,\n      shadowOpacity = _ref$shadowOpacity === void 0 ? neomorph ? 0 : 1 : _ref$shadowOpacity,\n      _ref$shadowOffset = _ref.shadowOffset,\n      shadowOffset = _ref$shadowOffset === void 0 ? {\n    width: 0,\n    height: 0\n  } : _ref$shadowOffset,\n      shadowRadius = _ref.shadowRadius,\n      shadowColor = _ref.shadowColor,\n      bottom = _ref.bottom,\n      direction = _ref.direction,\n      display = _ref.display,\n      end = _ref.end,\n      left = _ref.left,\n      margin = _ref.margin,\n      marginBottom = _ref.marginBottom,\n      marginEnd = _ref.marginEnd,\n      marginHorizontal = _ref.marginHorizontal,\n      marginLeft = _ref.marginLeft,\n      marginRight = _ref.marginRight,\n      marginStart = _ref.marginStart,\n      marginTop = _ref.marginTop,\n      marginVertical = _ref.marginVertical,\n      position = _ref.position,\n      right = _ref.right,\n      start = _ref.start,\n      top = _ref.top,\n      zIndex = _ref.zIndex,\n      backfaceVisibility = _ref.backfaceVisibility,\n      opacity = _ref.opacity,\n      transform = _ref.transform,\n      alignSelf = _ref.alignSelf,\n      borderBottomEndRadius = _ref.borderBottomEndRadius,\n      borderBottomLeftRadius = _ref.borderBottomLeftRadius,\n      borderBottomRightRadius = _ref.borderBottomRightRadius,\n      borderBottomStartRadius = _ref.borderBottomStartRadius,\n      borderTopEndRadius = _ref.borderTopEndRadius,\n      borderTopLeftRadius = _ref.borderTopLeftRadius,\n      borderTopRightRadius = _ref.borderTopRightRadius,\n      borderTopStartRadius = _ref.borderTopStartRadius,\n      flex = _ref.flex,\n      flexBasis = _ref.flexBasis,\n      flexGrow = _ref.flexGrow,\n      flexShrink = _ref.flexShrink,\n      maxHeight = _ref.maxHeight,\n      maxWidth = _ref.maxWidth,\n      minHeight = _ref.minHeight,\n      minWidth = _ref.minWidth,\n      elevation = _ref.elevation,\n      insideViewStyle = _objectWithoutProperties(_ref, [\"width\", \"height\", \"borderRadius\", \"backgroundColor\", \"shadowOpacity\", \"shadowOffset\", \"shadowRadius\", \"shadowColor\", \"bottom\", \"direction\", \"display\", \"end\", \"left\", \"margin\", \"marginBottom\", \"marginEnd\", \"marginHorizontal\", \"marginLeft\", \"marginRight\", \"marginStart\", \"marginTop\", \"marginVertical\", \"position\", \"right\", \"start\", \"top\", \"zIndex\", \"backfaceVisibility\", \"opacity\", \"transform\", \"alignSelf\", \"borderBottomEndRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\", \"borderBottomStartRadius\", \"borderTopEndRadius\", \"borderTopLeftRadius\", \"borderTopRightRadius\", \"borderTopStartRadius\", \"flex\", \"flexBasis\", \"flexGrow\", \"flexShrink\", \"maxHeight\", \"maxWidth\", \"minHeight\", \"minWidth\", \"elevation\"]);\n\n  var outsideViewStyle = {\n    bottom: bottom,\n    direction: direction,\n    display: display,\n    end: end,\n    left: left,\n    margin: margin,\n    marginBottom: marginBottom,\n    marginEnd: marginEnd,\n    marginHorizontal: marginHorizontal,\n    marginLeft: marginLeft,\n    marginRight: marginRight,\n    marginStart: marginStart,\n    marginTop: marginTop,\n    marginVertical: marginVertical,\n    position: position,\n    right: right,\n    start: start,\n    top: top,\n    zIndex: zIndex,\n    backfaceVisibility: backfaceVisibility,\n    opacity: opacity,\n    transform: transform\n  };\n\n  if (borderRadius > width / 2) {\n    borderRadius = width / 2;\n  }\n\n  if (borderRadius > height / 2) {\n    borderRadius = height / 2;\n  }\n\n  return {\n    outsideViewStyle: outsideViewStyle,\n    insideViewStyle: insideViewStyle,\n    allShadowProps: {\n      width: width,\n      height: height,\n      borderRadius: borderRadius < 0 ? 0 : borderRadius,\n      backgroundColor: backgroundColor === 'transparent' ? '#00000000' : backgroundColor,\n      shadowOpacity: shadowOpacity,\n      shadowOffset: {\n        x: shadowOffset.width,\n        y: shadowOffset.height\n      },\n      shadowRadius: shadowRadius ? shadowRadius * 2 : 0.1,\n      shadowColor: shadowColor\n    }\n  };\n}\nexport function brightness(color) {\n  var r, g, b, hsp;\n\n  if (color.match(/^rgb/)) {\n    color = color.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n    r = color[1];\n    g = color[2];\n    b = color[3];\n  } else {\n    color = +('0x' + color.slice(1).replace(color.length < 5 && /./g, '$&$&'));\n    r = color >> 16;\n    g = color >> 8 & 255;\n    b = color & 255;\n  }\n\n  hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));\n  return hsp;\n}\nexport function brightnessToOpacity(val) {\n  var ratio = 50;\n  var ratioBraghtness = val * (1 / 255);\n  var opacity = Math.pow(ratio, ratioBraghtness) / ratio - 1 / ratio;\n  return opacity;\n}\nexport function calcOpacityFromRange(val, min, max) {\n  return min + (max - min) * val;\n}","map":{"version":3,"sources":["/Users/omarfvivar/Documents/Github/VanPro/node_modules/react-native-neomorph-shadows/src/helpers.js"],"names":["getPathWithRadius","width","height","borderRadius","APrefix","ATopLeft","ATopRight","ABottomRight","ABottomLeft","transformShadowPropsForAndroid","props","shadowProps","Platform","OS","shadowRadius","shadowOffset","x","y","transformStyleProps","styleProps","neomorph","Array","StyleSheet","flatten","backgroundColor","shadowOpacity","shadowColor","bottom","direction","display","end","left","margin","marginBottom","marginEnd","marginHorizontal","marginLeft","marginRight","marginStart","marginTop","marginVertical","position","right","start","top","zIndex","backfaceVisibility","opacity","transform","alignSelf","borderBottomEndRadius","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStartRadius","borderTopEndRadius","borderTopLeftRadius","borderTopRightRadius","borderTopStartRadius","flex","flexBasis","flexGrow","flexShrink","maxHeight","maxWidth","minHeight","minWidth","elevation","insideViewStyle","outsideViewStyle","allShadowProps","brightness","color","r","g","b","hsp","match","slice","replace","length","Math","sqrt","brightnessToOpacity","val","ratio","ratioBraghtness","calcOpacityFromRange","min","max"],"mappings":"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","sourcesContent":["/* eslint-disable no-bitwise */\nimport { Platform, StyleSheet } from 'react-native';\n\nexport function getPathWithRadius(width, height, borderRadius) {\n  if (borderRadius) {\n    const APrefix = `A ${borderRadius}, ${borderRadius}, 0 0 1`;\n    const ATopLeft = `${APrefix} ${borderRadius},0`;\n    const ATopRight = `${APrefix} ${width},${borderRadius}`;\n    const ABottomRight = `${APrefix} ${width - borderRadius},${height}`;\n    const ABottomLeft = `${APrefix} 0,${height - borderRadius}`;\n    return `M 0,${borderRadius} ${ATopLeft} H ${\n      width - borderRadius\n      } ${ATopRight} V ${\n      height - borderRadius\n      } ${ABottomRight} H ${borderRadius} ${ABottomLeft} Z`;\n  } else {\n    return `M 0,0 H ${width} V ${height} H 0 Z`;\n  }\n}\n\nexport function transformShadowPropsForAndroid(props) {\n  const shadowProps = { ...props };\n  if (Platform.OS === 'android') {\n    shadowProps.shadowRadius = props.shadowRadius * 2;\n    shadowProps.shadowOffset.x = props.shadowOffset.x * 3;\n    shadowProps.shadowOffset.y = props.shadowOffset.y * 3;\n  }\n  return shadowProps;\n}\n\nexport function transformStyleProps(styleProps, neomorph) {\n  let {\n    /* start shadow props */\n    width,\n    height,\n    borderRadius = 0,\n    backgroundColor,\n    shadowOpacity = neomorph ? 0 : 1,\n    shadowOffset = { width: 0, height: 0 },\n    shadowRadius,\n    shadowColor,\n    /* end shadow props */\n    bottom,\n    direction,\n    display,\n    end,\n    left,\n    margin,\n    marginBottom,\n    marginEnd,\n    marginHorizontal,\n    marginLeft,\n    marginRight,\n    marginStart,\n    marginTop,\n    marginVertical,\n    position,\n    right,\n    start,\n    top,\n    zIndex,\n    backfaceVisibility,\n    opacity,\n    transform,\n\n    alignSelf, //remove temporary\n    borderBottomEndRadius, //remove temporary\n    borderBottomLeftRadius, //remove temporary\n    borderBottomRightRadius, //remove temporary\n    borderBottomStartRadius, //remove temporary\n    borderTopEndRadius, //remove temporary\n    borderTopLeftRadius, //remove temporary\n    borderTopRightRadius, //remove temporary\n    borderTopStartRadius, //remove temporary\n\n    flex, //remove\n    flexBasis, //remove\n    flexGrow, //remove\n    flexShrink, //remove\n    maxHeight, //remove\n    maxWidth, //remove\n    minHeight, //remove\n    minWidth, //remove\n    elevation, //remove\n\n    ...insideViewStyle\n  } = styleProps instanceof Array ? StyleSheet.flatten(styleProps) : styleProps;\n  const outsideViewStyle = {\n    bottom,\n    direction,\n    display,\n    end,\n    left,\n    margin,\n    marginBottom,\n    marginEnd,\n    marginHorizontal,\n    marginLeft,\n    marginRight,\n    marginStart,\n    marginTop,\n    marginVertical,\n    position,\n    right,\n    start,\n    top,\n    zIndex,\n    backfaceVisibility,\n    opacity,\n    transform,\n  };\n  if (borderRadius > width / 2) {\n    borderRadius = width / 2;\n  }\n  if (borderRadius > height / 2) {\n    borderRadius = height / 2;\n  }\n  return {\n    outsideViewStyle,\n    insideViewStyle,\n    allShadowProps: {\n      width,\n      height,\n      borderRadius: borderRadius < 0 ? 0 : borderRadius,\n      backgroundColor:\n        backgroundColor === 'transparent' ? '#00000000' : backgroundColor,\n      shadowOpacity,\n      shadowOffset: { x: shadowOffset.width, y: shadowOffset.height },\n      shadowRadius: shadowRadius ? shadowRadius * 2 : 0.1,\n      shadowColor,\n    },\n  };\n}\n\n/* get brightness from rgb/hex color */\nexport function brightness(color) {\n  let r, g, b, hsp;\n  if (color.match(/^rgb/)) {\n    color = color.match(\n      /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/,\n    );\n    r = color[1];\n    g = color[2];\n    b = color[3];\n  } else {\n    color = +('0x' + color.slice(1).replace(color.length < 5 && /./g, '$&$&'));\n    r = color >> 16;\n    g = (color >> 8) & 255;\n    b = color & 255;\n  }\n  hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));\n  return hsp;\n}\n\n/* exponental transform brightness to opacity */\nexport function brightnessToOpacity(val) {\n  const ratio = 50;\n  const ratioBraghtness = val * (1 / 255);\n  const opacity = ratio ** ratioBraghtness / ratio - 1 / ratio;\n  return opacity;\n}\n\n/* calculate opacity from range [min, max] */\nexport function calcOpacityFromRange(val, min, max) {\n  return min + (max - min) * val;\n}\n"]},"metadata":{},"sourceType":"module"}